"""
Build script for creating a standalone executable of Ruddibaba Optimizer
"""
import os
import sys
import shutil
import subprocess
import platform
from pathlib import Path

# Project information
PROJECT_NAME = "RuddibabaOptimizer"
VERSION = "0.1.0"
AUTHOR = "Ruddibaba"
DESCRIPTION = "A powerful Windows optimization tool with multiple optimization levels"

# Paths
ROOT_DIR = Path(__file__).parent.parent
BUILD_DIR = ROOT_DIR / "build"
DIST_DIR = ROOT_DIR / "dist"
SPEC_FILE = ROOT_DIR / f"{PROJECT_NAME}.spec"

# Clean up previous builds
def clean_build():
    """Remove previous build and dist directories"""
    print("Cleaning up previous builds...")
    for directory in [BUILD_DIR, DIST_DIR]:
        if directory.exists():
            shutil.rmtree(directory)
    if SPEC_FILE.exists():
        SPEC_FILE.unlink()

def install_dependencies():
    """Install required dependencies"""
    print("Installing dependencies...")
    subprocess.check_call([
        sys.executable, "-m", "pip", "install", 
        "-r", str(ROOT_DIR / "requirements.txt"),
        "pyinstaller>=5.0.0"
    ])

def create_spec_file():
    """Create PyInstaller spec file"""
    print("Creating PyInstaller spec file...")
    
    spec_content = f"""# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['src/ruddibaba_optimizer/__main__.py'],
    pathex=[],
    binaries=[],
    datas=[],
    hiddenimports=[],
    hookspath=[],
    hooksconfig={{}},
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='{PROJECT_NAME}',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=True,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='assets/icon.ico',
    version='{VERSION}',
    uac_admin=True,
)
"""
    with open(SPEC_FILE, 'w', encoding='utf-8') as f:
        f.write(spec_content)

def build_executable():
    """Build the executable using PyInstaller"""
    print("Building executable...")
    
    # Create assets directory if it doesn't exist
    assets_dir = ROOT_DIR / "assets"
    assets_dir.mkdir(exist_ok=True)
    
    # Create a default icon if it doesn't exist
    icon_path = assets_dir / "icon.ico"
    if not icon_path.exists():
        print(f"Warning: Icon not found at {icon_path}. Creating a default icon...")
        # Create a simple icon using Pillow if available
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # Create a 256x256 image with a blue background
            img = Image.new('RGB', (256, 256), (30, 144, 255))  # DodgerBlue
            d = ImageDraw.Draw(img)
            
            # Add text
            try:
                font = ImageFont.truetype("arial.ttf", 80)
            except IOError:
                font = ImageFont.load_default()
                
            d.text((20, 80), "RO", font=font, fill=(255, 255, 255))
            
            # Save as ICO
            img.save(icon_path, format='ICO')
            print(f"Created default icon at {icon_path}")
        except ImportError:
            print("Pillow not installed. Using default PyInstaller icon.")
            icon_path = None
    
    # Build the executable
    cmd = [
        'pyinstaller',
        '--clean',
        '--noconfirm',
        '--windowed',
        '--onefile',
        '--name', PROJECT_NAME,
        '--version-file', str(ROOT_DIR / 'version.txt'),
        '--add-data', f'src/ruddibaba_optimizer;ruddibaba_optimizer',
    ]
    
    if icon_path and icon_path.exists():
        cmd.extend(['--icon', str(icon_path)])
    
    cmd.extend([
        '--uac-admin',
        '--distpath', str(DIST_DIR),
        '--workpath', str(BUILD_DIR),
        '--specpath', str(ROOT_DIR),
        str(ROOT_DIR / 'src' / 'ruddibaba_optimizer' / '__main__.py')
    ])
    
    subprocess.check_call(cmd)

def create_installer():
    """Create an installer using NSIS (if available)"""
    if platform.system() != 'Windows':
        print("Skipping NSIS installer creation (Windows only)")
        return
        
    try:
        import nsis
    except ImportError:
        print("NSIS not found. Skipping installer creation.")
        print("Install with: pip install nsis")
        return
        
    print("Creating NSIS installer...")
    
    nsis_script = f"""
    ; Script generated by the HM NIS Edit Script Wizard.
    ; HM NIS Edit Wizard helper defines
    !define PRODUCT_NAME "{PROJECT_NAME}"
    !define PRODUCT_VERSION "{VERSION}"
    !define PRODUCT_PUBLISHER "{AUTHOR}"
    !define PRODUCT_WEB_SITE "https://github.com/yourusername/{PROJECT_NAME}"
    !define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\${{PRODUCT_NAME}}.exe"
    !define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${{PRODUCT_NAME}}"
    !define PRODUCT_UNINST_ROOT_KEY "HKLM"

    ; MUI 1.67 compatible ------
    !include "MUI.nsh"

    ; MUI Settings
    !define MUI_ABORTWARNING
    !define MUI_ICON "${{NSISDIR}}\Contrib\Graphics\Icons\modern-install.ico"
    !define MUI_UNICON "${{NSISDIR}}\Contrib\Graphics\Icons\modern-uninstall.ico"

    ; Welcome page
    !insertmacro MUI_PAGE_WELCOME
    ; License page
    !insertmacro MUI_PAGE_LICENSE "LICENSE"
    ; Directory page
    !insertmacro MUI_PAGE_DIRECTORY
    ; Instfiles page
    !insertmacro MUI_PAGE_INSTFILES
    ; Finish page
    !define MUI_FINISHPAGE_RUN "$INSTDIR\{PROJECT_NAME}.exe"
    !insertmacro MUI_PAGE_FINISH

    ; Uninstaller pages
    !insertmacro MUI_UNPAGE_INSTFILES

    ; Language files
    !insertmacro MUI_LANGUAGE "English"

    ; MUI end ------

    Name "${{PRODUCT_NAME}} ${{PRODUCT_VERSION}}"
    OutFile "${{PROJECT_NAME}}_Setup_${{PRODUCT_VERSION}}.exe"
    InstallDir "$PROGRAMFILES\\${{PRODUCT_NAME}}"
    InstallDirRegKey HKLM "${{PRODUCT_DIR_REGKEY}}" ""
    ShowInstDetails show
    ShowUnInstDetails show

    Section "MainSection" SEC01
      SetOutPath "$INSTDIR"
      SetOverwrite try
      File /r "dist\\*.*"
    SectionEnd

    Section -Post
      WriteUninstaller "$INSTDIR\\uninst.exe"
      WriteRegStr HKLM "${{PRODUCT_DIR_REGKEY}}" "" "$INSTDIR\\{PROJECT_NAME}.exe"
      WriteRegStr ${{PRODUCT_UNINST_ROOT_KEY}} "${{PRODUCT_UNINST_KEY}}" "DisplayName" "$(^Name)"
      WriteRegStr ${{PRODUCT_UNINST_ROOT_KEY}} "${{PRODUCT_UNINST_KEY}}" "UninstallString" "$INSTDIR\\uninst.exe"
      WriteRegStr ${{PRODUCT_UNINST_ROOT_KEY}} "${{PRODUCT_UNINST_KEY}}" "DisplayVersion" "${{PRODUCT_VERSION}}"
      WriteRegStr ${{PRODUCT_UNINST_ROOT_KEY}} "${{PRODUCT_UNINST_KEY}}" "URLInfoAbout" "${{PRODUCT_WEB_SITE}}"
      WriteRegStr ${{PRODUCT_UNINST_ROOT_KEY}} "${{PRODUCT_UNINST_KEY}}" "Publisher" "${{PRODUCT_PUBLISHER}}"
    SectionEnd

    Function un.onUninstSuccess
      HideWindow
      MessageBox MB_ICONINFORMATION|MB_OK "${{PRODUCT_NAME}} was successfully removed from your computer."
    FunctionEnd

    Function un.onInit
      MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove ${{PRODUCT_NAME}} and all of its components?" IDYES +2
      Abort
    FunctionEnd

    Section Uninstall
      Delete "$INSTDIR\\uninst.exe"
      RMDir /r "$INSTDIR"
      RMDir "$0"
      DeleteRegKey HKLM "${{PRODUCT_DIR_REGKEY}}"
      DeleteRegKey ${{PRODUCT_UNINST_ROOT_KEY}} "${{PRODUCT_UNINST_KEY}}"
      SetAutoClose true
    SectionEnd
    """
    
    nsis_script_path = BUILD_DIR / "installer.nsi"
    with open(nsis_script_path, 'w', encoding='utf-8') as f:
        f.write(nsis_script)
    
    # Build the installer
    try:
        subprocess.check_call(['makensis', str(nsis_script_path)])
        print(f"Installer created at {nsis_script_path.parent / f'{PROJECT_NAME}_Setup_{VERSION}.exe'}")
    except subprocess.CalledProcessError as e:
        print(f"Failed to create installer: {e}")
    except FileNotFoundError:
        print("NSIS (makensis) not found. Please install NSIS from https://nsis.sourceforge.io/Download")

def main():
    """Main build function"""
    print(f"Building {PROJECT_NAME} v{VERSION}")
    print("=" * 50)
    
    # Clean up previous builds
    clean_build()
    
    # Install dependencies
    install_dependencies()
    
    # Create the executable
    build_executable()
    
    # Create an installer (Windows only)
    if platform.system() == 'Windows':
        create_installer()
    
    print("\nBuild completed successfully!")
    print(f"Executable location: {DIST_DIR / PROJECT_NAME}")

if __name__ == "__main__":
    main()
